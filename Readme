# üìò Spring AOP (Aspect Oriented Programming) ‚Äì Backend Learning  

I learned this topic as part of **Backend Development in Spring Framework**, focusing on **AOP (Aspect Oriented Programming)** and how it helps to separate **cross-cutting concerns** like **logging, security, and transaction management**.

---

## ‚úÖ **Overview**
This project demonstrates **Spring AOP using CGLIB dynamic proxies**.  
It uses:
- **Enhancer** (from CGLIB) for proxy creation  
- **MethodInterceptor** for method interception  
- **Original Class** for business logic  

---

## üîç **What is AOP?**
AOP stands for **Aspect-Oriented Programming**, which is used to separate **cross-cutting concerns** from the main business logic.

### üí° **Why use AOP?**
- To avoid **code duplication**
- To achieve **clean and maintainable code**
- To apply common functionalities like:
  - ‚úÖ Logging
  - ‚úÖ Security
  - ‚úÖ Transaction Management
  - ‚úÖ Caching
  - ‚úÖ Performance Monitoring

---

## üõ† **Core AOP Concepts**
| Concept       | Description |
|--------------|-------------|
| **Aspect**   | A module that encapsulates a cross-cutting concern like logging or security. |
| **Advice**   | The action taken by an Aspect at a particular join point (e.g., before, after, around). |
| **Join Point** | A point in the execution of the program (method call, constructor execution). |
| **Pointcut** | An expression that matches join points. |
| **Weaving**  | The process of linking Aspects with application code at runtime or compile time. |
| **Proxy**    | A class created by Spring AOP to wrap the target object and apply aspects. |

---

## ‚ö° **Types of Advice**
- **Before Advice** ‚Äì Runs **before** the method execution
- **After Advice** ‚Äì Runs **after** the method execution (regardless of outcome)
- **After Returning Advice** ‚Äì Runs **after method returns successfully**
- **After Throwing Advice** ‚Äì Runs **after method throws an exception**
- **Around Advice** ‚Äì Runs **before and after** method execution

---

## üîë **Proxy in Spring AOP**
Spring AOP uses **Proxies** to apply aspects:
- **JDK Dynamic Proxy** ‚Äì For interfaces
- **CGLIB Proxy** ‚Äì For classes without interfaces (like in this example)
